#!/usr/bin/env sh
set +x

DEBUG=false

if [ $DEBUG = true ]; then
    exec 3>&1 4>&2
    trap 'exec 2>&4 1>&3' 0 1 2 3
    exec 1>>"$HOME/octosign-install.log" 2>&1
fi

# chown root:wheel "/Applications"
chmod a+rX "/Applications"
chmod +r "/Applications/Octosign.app/Contents/app/"*.jar


SCRIPT_DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

function create_cert(){
    TLS_DIR="$HOME/Library/Application Support/Octosign/tls"


    DIALOG_RET=$(osascript -e 'return display dialog "Teraz vygenerujeme Váš osobný certifikát. Následne si od Vás inštalátor vyžiada heslo, aby certifikát mohol byť pridaný ako dôveryhodný pre spojenie so Safari." with icon caution')

    if [ $DIALOG_RET -ne 0 ]; then
        return 0
    fi

    mkdir -p "$TLS_DIR"

    # Create temp openssl configuration
    SSL_CONFIG_TMP=$(mktemp)
    echo "[ req ]
req_extensions = v3_req
x509_extensions = v3_req
distinguished_name = dn
prompt = no
encrypt_key = no

[ v3_req ]
subjectAltName = @alt_names
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth

certificatePolicies = 1.2.3.4

[dn]
C=SK
O=SSD
CN=yoogle.com

[CA_default]
copy_extension=copy

[alt_names]
DNS.1=yoogle.com

" > $SSL_CONFIG_TMP ;

    cat $SSL_CONFIG_TMP;

    /usr/bin/openssl req -nodes -x509 -newkey rsa:4096 -keyout "$TLS_DIR/octosign-key.pem" -out "$TLS_DIR/octosign-cert.pem" -sha256 -days 365 -config $SSL_CONFIG_TMP

    /usr/bin/openssl pkcs12 -export -in "$TLS_DIR/octosign-cert.pem" -inkey "$TLS_DIR/octosign-key.pem" -out "$TLS_DIR/octosign-pkcs12-cert.p12" -name "octosign-pkcs12-cert"  -passout pass:

    security -v add-trusted-cert -r trustRoot -p basic -p ssl -k $HOME/Library/Keychains/login.keychain-db "$TLS_DIR/octosign-cert.pem"

    # Cleanup openssl config
    rm $SSL_CONFIG_TMP
}

# Write out functions into variable
FUNC=$(declare -f)

# Run function create_cert in "unpriviledged" environment - with real user env
sudo -u "$USER" bash -c "$FUNC; create_cert"


exit 0;
